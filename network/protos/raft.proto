// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.raft";
option java_outer_classname = "raftProto";
option objc_class_prefix = "HLW";

package raft;

// The Raft service definition.
service RaftService {
  // handle client request
  rpc CallToCluster(ClientRequest) returns (ClientResponse) {}
  // TODO: use async call inside cluster. 
  // For now, we split each call to two methods, both return GeneralResponse just to indicate whether is the message is received
  rpc AskForVote(VoteRequest) returns (VoteResponse) {}
  // handle replication request
  rpc ReplicateLogEntry(ReplicateRequest) returns (ReplicateResponse) {}
}

message ClientRequest {
  string message = 1;
}

message ClientResponse {
  string message = 1;
}

message VoteRequest {
  string message = 1;
  string node_name = 2;
  int32 cur_term = 3;
  int32 cur_index = 4;
}

message VoteResponse {
  string message = 1;
  string vote_name = 2;
  int32 vote_term = 3;
  int32 vote_index = 4;
  bool grant_or_deny = 5;
}

message ReplicateRequest {
  string message = 1;
  string leader_name = 2; 
  int32 cur_term = 3;
  int32 cur_index = 4;
  int32 prev_term = 5;
  int32 prev_index = 6;
  int32 commited_term = 7;
  int32 commited_index = 8;
  string data = 9;
}

message ReplicateResponse {
  string message = 1;
  string leader_name = 2;
  int32 append_term = 3;
  int32 append_index = 4;
  bool succeed_or_fail = 5;
}
